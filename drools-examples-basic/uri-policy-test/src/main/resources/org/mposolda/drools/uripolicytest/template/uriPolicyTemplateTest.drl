template header
PRIORITY
URI_PATTERN
QUERY_PARAMS_CONDITIONS

package org.mposolda.drools.uripolicytest;

import org.drools.WorkingMemory;
import org.mposolda.drools.uripolicytest.Result;
import org.mposolda.drools.uripolicytest.Decision;
import org.mposolda.drools.uripolicytest.UriPolicyInput;
import org.mposolda.drools.uripolicytest.Token;
import org.mposolda.drools.uripolicytest.MatcherInfo;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

dialect "mvel"

template "Uri policy"
rule "uri_policy_@{row.rowNumber}"
salience @{PRIORITY}
when
  $result: Result()
  $token: Token()
  $uriGroup: MatcherInfo()
  $upi: UriPolicyInput(matches(@{URI_PATTERN}, uri, $uriGroup) && (@{QUERY_PARAMS_CONDITIONS}))
then
  System.out.println("uri_policy_@{row.rowNumber}");
  System.out.println("Group 0: " + $uriGroup.get(0));
  System.out.println("Group 1: " + $uriGroup.get(1));
  System.out.println("Realm role 1: " + $token.realmRoles.get(0));
  $result.mergeDecision(Decision.ACCEPT);
  $uriGroup.reset();
end
end template

function boolean matches(String regex, String textToMatch, MatcherInfo mi) {
  System.out.println("regex: " + regex + ", textToMatch: " + textToMatch);
  Pattern p = Pattern.compile(regex);
  Matcher m = p.matcher(textToMatch);

  if (m.find()) {
    mi.setMatched(true);
    for (int i=0 ; i<=m.groupCount() ; i++) {
      mi.addGroup(m.group(i));
    }
  } else {
    mi.setMatched(false);
  }

  System.out.println("Going to return mi: " + mi);
  return mi.getMatched();
}


function String any(List items) {
  String result = "";
  for (int i=0 ; i<items.size() ; i++) {
    String item = (String)items.get(i);
    if (i > 0) {
        result = result + "|";
    }
    result = result + item;
  }
  return result;
}