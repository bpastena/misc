import org.drools.WorkingMemory;
import org.mposolda.drools.uripolicytest.Result;
import org.mposolda.drools.uripolicytest.Decision;
import org.mposolda.drools.uripolicytest.UriPolicyInput;
import org.mposolda.drools.uripolicytest.Token;
import org.mposolda.drools.uripolicytest.MatcherInfo;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

dialect "mvel"

rule "policy 1"
when
  $result: Result()
  token: Token()
  $upi: UriPolicyInput(uri == ("/kokos/" + token.username) && (reqParams.get("param1") == "value1" && reqParams.get("param2") == "value2"))
then
  System.out.println("policy1 matches!");
  $result.mergeDecision(Decision.ACCEPT);
end

rule "policy 2"
dialect "mvel"
when
  $result: Result()
  $token: Token()
  $mi: MatcherInfo()
  $upi: UriPolicyInput(matchess("^/kokos/(" + $token.username + ")$", uri, $mi))
then
  System.out.println("policy2 matches!");
  System.out.println("Group 0: " + $mi.get(0));
  System.out.println("Group 1: " + $mi.get(1));
  $result.mergeDecision(Decision.ACCEPT);
  $mi.reset();
end

function boolean matchess(String regex, String textToMatch, MatcherInfo mi) {
  System.out.println("regex: " + regex + ", textToMatch: " + textToMatch);
  Pattern p = Pattern.compile(regex);
  Matcher m = p.matcher(textToMatch);

  if (m.find()) {
    mi.setMatched(true);
    for (int i=0 ; i<=m.groupCount() ; i++) {
      mi.addGroup(m.group(i));
    }
  } else {
    mi.setMatched(false);
  }

  System.out.println("Going to return mi: " + mi);
  return mi.getMatched();
}