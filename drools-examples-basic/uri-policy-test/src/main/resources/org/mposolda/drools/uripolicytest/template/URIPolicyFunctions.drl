package org.mposolda.drools.uripolicytest;

import org.mposolda.drools.uripolicytest.RulesProcessingResult;
import org.mposolda.drools.uripolicytest.AuthorizationDecision;
import org.mposolda.drools.uripolicytest.RequestInfo;
import org.mposolda.drools.uripolicytest.RequestType;
import org.mposolda.drools.uripolicytest.Token;
import org.mposolda.drools.uripolicytest.URIMatcher;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

dialect "mvel"

function boolean uriMatches(String ruleName, String regex, String textToMatch, URIMatcher uriMatcher) {
  if (uriMatcher.isProcessed()) {
    return uriMatcher.isMatched();
  }

  Pattern p = Pattern.compile(regex);
  Matcher m = p.matcher(textToMatch);

  if (m.find()) {
    uriMatcher.setMatched(true);

    for (int i=0 ; i<=m.groupCount() ; i++) {
      uriMatcher.addGroup(m.group(i));
    }
  } else {
    uriMatcher.setMatched(false);
  }

  uriMatcher.setProcessed(true);
  System.out.println("Checking URI regex for rule " + ruleName + ". regex: " + regex + ", textToMatch: " + textToMatch
      + ", result: " + uriMatcher);

  return uriMatcher.isMatched();
}

function boolean requestConditionsMatches(String ruleName, boolean result) {
   System.out.println("Checking params condition for rule: " + ruleName + ", result: " + result);
   return result;
}

function boolean requestTypeMatches(String ruleName, RequestType reqType, String allowedTypes) {
  boolean result = allowedTypes.contains(reqType.name());
  System.out.println("Checking requestType for rule " + ruleName + ". Incoming requestType: " + reqType
      + ", allowedTypes: " + allowedTypes + ", result: " + result);

  return result;
}

function String any(List items) {
  String rulesProcessingResult = "";
  for (int i=0 ; i<items.size() ; i++) {
    String item = (String)items.get(i);
    if (i > 0) {
        rulesProcessingResult = rulesProcessingResult + "|";
    }
    rulesProcessingResult = rulesProcessingResult + item;
  }
  return rulesProcessingResult;
}